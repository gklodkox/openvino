on:
  push:
    branches:
    - master
    - releases/*
    paths-ignore:
      - docs/
      - /**/docs/*
      - /**/*.md
      - README.md
      - /**/layer_tests_summary/**
  pull_request:
    branches:
      - master
      - releases/*
    paths-ignore:
      - docs/
      - /**/docs/*
      - /**/*.md
      - README.md
      - /**/layer_tests_summary/**
  workflow_dispatch:
jobs:
  Lin:
    strategy:
      matrix:
        CMAKE_BUILD_SHARED_LIBS:
          - ON
          - OFF
      max-parallel: 2
    runs-on: ubuntu-20.04
    timeout-minutes: 120
    env:
      system.debug: true
      VSTS_HTTP_RETRY: 5
      VSTS_HTTP_TIMEOUT: 200
      BUILD_TYPE: Release
      REPO_DIR: $(Build.Repository.LocalPath)
      OPENVINO_CONTRIB_REPO_DIR: $(Build.Repository.LocalPath)/../openvino_contrib
      MODELS_PATH: $(Build.Repository.LocalPath)/../testdata
      WORK_DIR: $(Pipeline.Workspace)/_w
      BUILD_DIR: $(Pipeline.Workspace)/_w/build
      BUILD_SAMPLES_DIR: $(Pipeline.Workspace)/build_samples
      BUILD_LAYER_TESTS_DIR: $(Pipeline.Workspace)/build_layer_tests
      BUILD_SAMPLES_TESTS_DIR: $(Pipeline.Workspace)/build_samples_tests
      INSTALL_DIR: $(Pipeline.Workspace)/install_pkg
      INSTALL_TEST_DIR: $(Pipeline.Workspace)/install_pkg/tests
      LAYER_TESTS_DIR: $(Pipeline.Workspace)/install_pkg/tests/layer_tests
      SETUPVARS: $(Pipeline.Workspace)/install_pkg/setupvars.sh
      TMP_DIR: /mnt/tmp
      SHARE_DIR: /mount/cinfsshare/onnxtestdata
      CCACHE_DIR: /mount/cinfsshare/onnxtestdata/ccache/master/linux
      CMAKE_VERSION: 3.24.0
      BUILD_PYTHON: $(Pipeline.Workspace)/_w/build_python
      INSTALL_PYTHON: $(INSTALL_OPENVINO)/extras/python
      PY_VENV: $(Pipeline.Workspace)/_w/.venv
      PYTHON_VERSION: 3.10.7
    steps:
    - uses: actions/checkout@v3
    - name: Print system information
      run: |
        curl -H Metadata:true --noproxy "*" "http://169.254.169.254/metadata/instance?api-version=2019-06-01"
        whoami
        uname -a
        echo Python3 info ; which python3 ; python3 --version
        echo Java info ; which java ; java -version
        echo gcc info ; which gcc ; gcc --version
        echo cmake info ; which cmake ; cmake --version
        lsb_release
        env
        cat /proc/cpuinfo
        cat /proc/meminfo
        cat /etc/fstab
        vmstat -s
        df
        lsblk -o NAME,HCTL,SIZE,MOUNTPOINT | grep -i "sd"
        free -h
        echo TargetBranch: ${{ env.System.PullRequest.TargetBranch }}
        echo SourceBranch: ${{ github.ref }}

    - name: Setup directories
      run: |
        set -e
        rm -rf ${{ env.WORK_DIR }} ; mkdir ${{ env.WORK_DIR }}
        rm -rf ${{ env.BUILD_DIR }} ; mkdir ${{ env.BUILD_DIR }}
        rm -rf ${{ env.BUILD_SAMPLES_DIR }} ; mkdir ${{ env.BUILD_SAMPLES_DIR }}
        sudo rm -rf ${{ env.TMP_DIR }} ; sudo mkdir ${{ env.TMP_DIR }} ; sudo chmod 777 -R ${{ env.TMP_DIR }}
        sudo mkdir -p ${{ env.SHARE_DIR }}
        sudo apt --assume-yes update && sudo apt --assume-yes install nfs-common
        sudo mount -vvv -t nfs cinfsshare.file.core.windows.net:/cinfsshare/onnxtestdata ${{ env.SHARE_DIR }} -o vers=4,minorversion=1,sec=sys
        mkdir -p ${{ env.CCACHE_DIR }}

    - name: Install lcov
      run: sudo apt --assume-yes install lcov
      if: (success() && ${{ env.CMAKE_BUILD_SHARED_LIBS }} == 'ON'}}
    - uses: actions/checkout@v3
      with:
        lfs: false
        clean: true
    - uses: actions/checkout@v3
      with:
        repository: openvinotoolkit/openvino_contrib
        lfs: false
        clean: true
        ref: master

    - name: Install cmake
      run: |
        wget "https://github.com/Kitware/CMake/releases/download/v${CMAKE_VERSION}/cmake-${CMAKE_VERSION}-linux-x86_64.sh"
        chmod +x ./cmake-${CMAKE_VERSION}-linux-x86_64.sh
        sudo ./cmake-${CMAKE_VERSION}-linux-x86_64.sh --prefix=/usr/local/ --skip-license
        rm -rf ./cmake-${CMAKE_VERSION}-linux-x86_64.sh

    - name: Install dependencies
      run: |
        set -e
        ${{ env.REPO_DIR }}/install_build_dependencies.sh
        # Move jdk into contrib
        # 'clang' compiler is to check that samples can be built using it
        sudo apt --assume-yes install openjdk-11-jdk libbz2-dev clang
        # For opencv-python: python3-setuptools and pip upgrade
        wget https://www.python.org/ftp/python/"${{ env.PYTHON_VERSION }}"/Python-"${{ env.PYTHON_VERSION }}".tgz
        tar -xzf Python-"${{ env.PYTHON_VERSION }}".tgz
        cd Python-"${{ env.PYTHON_VERSION }}" || exit
        ./configure --enable-optimizations --prefix=/usr/local --enable-shared LDFLAGS="-Wl,-rpath /usr/local/lib"
        make python
        sudo make install
        export LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH
        /usr/local/bin/python3.10 -m venv ${{ env.PY_VENV }}
        . ${{ env.PY_VENV }}/bin/activate
        echo Python3 info ; which python3 ; python3 --version
        python3 --version
        python3.10 --version
        curl https://bootstrap.pypa.io/get-pip.py | python3
        python3 -m pip install --upgrade pip
        python3 -m pip install -r ${{ env.REPO_DIR }}/src/bindings/python/src/compatibility/openvino/requirements.txt
        python3 -m pip install -r ${{ env.REPO_DIR }}/src/bindings/python/wheel/requirements-dev.txt
        python3 -m pip install -r ${{ env.REPO_DIR }}/src/bindings/python/requirements.txt
        # For running Python API tests
        python3 -m pip install -r ${{ env.REPO_DIR }}/src/bindings/python/src/compatibility/openvino/requirements-dev.txt
        # For running Paddle frontend unit tests
        python3 -m pip install -r ${{ env.REPO_DIR }}/src/frontends/paddle/tests/requirements.txt
        # For running ONNX frontend unit tests
        python3 -m pip install -r ${{ env.REPO_DIR }}/src/frontends/onnx/tests/requirements.txt
        # For MO unit tests
        python3 -m pip install -r ${{ env.REPO_DIR }}/tools/mo/requirements.txt
        python3 -m pip install -r ${{ env.REPO_DIR }}/tools/mo/requirements_dev.txt
        # Speed up build
        wget https://github.com/ninja-build/ninja/releases/download/v1.10.2/ninja-linux.zip
        unzip ninja-linux.zip
        sudo cp -v ninja /usr/local/bin/
        # Speed up tests
        git clone https://github.com/google/gtest-parallel.git
    - uses: actions/checkout@v3
      with:
        repository: openvinotoolkit/testdata
        clean: true
        ref: master
        lfs: true
    - uses: ashutoshvarma/action-cmake-build@master
      with:
        build-options:
          -GNinja
          -DCMAKE_VERBOSE_MAKEFILE=ON
          -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}
          -DCMAKE_COMPILE_WARNING_AS_ERROR=ON
          -DENABLE_PYTHON=ON
          -DBUILD_SHARED_LIBS=${{ matrix.CMAKE_BUILD_SHARED_LIBS }}
          -DENABLE_ONEDNN_FOR_GPU=${{ matrix.CMAKE_BUILD_SHARED_LIBS }}
          -DPYTHON_EXECUTABLE=${{ env.PY_VENV }}/bin/python3.10
          -DENABLE_TESTS=ON
          -DENABLE_OV_ONNX_FRONTEND=ON
          -DENABLE_FASTER_BUILD=ON
          -DENABLE_STRICT_DEPENDENCIES=OFF
          -DENABLE_REQUIREMENTS_INSTALL=OFF
          -DOPENVINO_EXTRA_MODULES=${{ env.OPENVINO_CONTRIB_REPO_DIR }}/modules
          -DCMAKE_CXX_COMPILER_LAUNCHER=ccache
          -DCMAKE_C_COMPILER_LAUNCHER=ccache
          -DCMAKE_CXX_LINKER_LAUNCHER=ccache
          -DCMAKE_C_LINKER_LAUNCHER=ccache
          -DCPACK_GENERATOR=${{ env.CMAKE_CPACK_GENERATOR }}
          -DBUILD_nvidia_plugin=OFF
          -DENABLE_COVERAGE=${{ matrix.CMAKE_BUILD_SHARED_LIBS }}
          -S ${{ env.REPO_DIR }}
          -B ${{ env.BUILD_DIR }}
    - name: List temp SDKs
      run: ls -alR ${{ env.REPO_DIR }}/temp/

    - name: Clean ccache stats
      run: ccache --zero-stats --max-size=50G --show-config

    - name: Build Lin
      run: |  
        export CCACHE_DIR=${{ env.CCACHE_DIR }}
        export CCACHE_TEMPDIR=${{ env.TMP_DIR }}/ccache
        export CCACHE_BASEDIR=${{ env.Pipeline.Workspace }}
        export CCACHE_MAXSIZE=50G
        ninja -C ${{ env.BUILD_DIR }}

    - name: Show ccache stats
      run: ccache --show-stats

    - name: List bin files
      run: ls -alR ${{ env.REPO_DIR }}/bin/

    - uses: ashutoshvarma/action-cmake-build@master
      with:
        build-dir: ${{ env.BUILD_LAYER_TESTS_DIR }}
        build-options:
          -GNinja ${{ env.REPO_DIR }}/tests/layer_tests

    - name:  Build Layer Tests
      run: ninja -C ${{ env.BUILD_LAYER_TESTS_DIR }}

    - name: Install wheel packages
      run: cmake -DCOMPONENT=python_wheels -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -P ${{ env.BUILD_DIR }}/cmake_install.cmake

    - name: Install Layer Tests
      run: cmake -DCOMPONENT=tests -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -P ${{ env.BUILD_LAYER_TESTS_DIR }}/cmake_install.cmake

    - name: Install python wheels
      run: |
        . ${{ env.PY_VENV }}/bin/activate
        python3 -m pip install openvino-dev --find-links=${{ env.INSTALL_DIR }}/tools

    - name: Install tests
      run: |
        set -e
        cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -DCOMPONENT=tests -P ${{ env.BUILD_DIR }}/cmake_install.cmake

    - name: List install test files
      run: ls -alR ${{ env.INSTALL_DIR }}

    - name: nGraph and IE Python Bindings Tests
      run: |
        . ${{ env.PY_VENV }}/bin/activate
        export DATA_PATH=${{ env.MODELS_PATH }}
        export MODELS_PATH=${{ env.MODELS_PATH }}
        # because of static build libgna is needed for python binary
        export LD_LIBRARY_PATH=${{ env.REPO_DIR }}/temp/gna_03.00.00.1815.1/linux/x64:$LD_LIBRARY_PATH
        python3 -m pytest -s ${{ env.INSTALL_TEST_DIR }}/pyngraph ${{ env.PYTHON_STATIC_ARGS }} \
        --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-Pyngraph.xml \
        --ignore=${{ env.INSTALL_TEST_DIR }}/pyngraph/tests/test_onnx/test_zoo_models.py \
        --ignore=${{ env.INSTALL_TEST_DIR }}/pyngraph/tests/test_onnx/test_backend.py

    - name: Python API 2.0 Tests
      run: |
        . ${{ env.PY_VENV }}/bin/activate
        export DATA_PATH=${{ env.MODELS_PATH }}
        export MODELS_PATH=${{ env.MODELS_PATH }}
        # because of static build libgna is needed for python binary and mock_py frontend library
        export LD_LIBRARY_PATH=${{ env.REPO_DIR }}/temp/gna_03.00.00.1815.1/linux/x64:${{ env.INSTALL_TEST_DIR }}:$LD_LIBRARY_PATH
        # For python imports to import pybind_mock_frontend
        export PYTHONPATH=${{ env.INSTALL_TEST_DIR }}:${{ env.INSTALL_DIR }}/python/python3.8:$PYTHONPATH
        # For frontend manager to load mock_py library
        export OV_FRONTEND_PATH=${{ env.INSTALL_TEST_DIR }}
        python3 -m pytest -sv ${{ env.INSTALL_TEST_DIR }}/pyopenvino ${{ env.PYTHON_STATIC_ARGS }} \
          --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-Pyngraph.xml \
          --ignore=${{ env.INSTALL_TEST_DIR }}/pyopenvino/tests/test_utils/test_utils.py \
          --ignore=${{ env.INSTALL_TEST_DIR }}/pyopenvino/tests/test_onnx/test_zoo_models.py \
          --ignore=${{ env.INSTALL_TEST_DIR }}/pyopenvino/tests/test_onnx/test_backend.py
      if: (success() && ${{ env.CMAKE_BUILD_SHARED_LIBS }} == 'OFF'))

    - name: Model Optimizer UT
      run: |
        . ${{ env.PY_VENV }}/bin/activate
        # because of static build libgna is needed for python binary
        export LD_LIBRARY_PATH=${{ env.REPO_DIR }}/temp/gna_03.00.00.1815.1/linux/x64:$LD_LIBRARY_PATH
        python3 -m pytest -s ${{ env.INSTALL_TEST_DIR }}/mo/unit_tests --junitxml=${{ env.INSTALL_TEST_DIR }}/TEST-ModelOptimizer.xml
      continue-on-error: false

    - name: Install OpenVINO
      run: cmake -DCMAKE_INSTALL_PREFIX=${{ env.INSTALL_DIR }} -P ${{ env.BUILD_DIR }}/cmake_install.cmake

    - name: List install files
      run: ls -alR ${{ env.INSTALL_DIR }}

    - name: Build Cpp samples
      run: ${{ env.SAMPLES_INSTALL_DIR }}/cpp/build_samples.sh -i ${{ env.INSTALL_DIR }} -b ${{ env.BUILD_DIR }}/cpp_samples

    - name: Build Cpp samples - clang
      run: |
        export CC=clang
        export CXX=clang++
        ${{ env.SAMPLES_INSTALL_DIR }}/cpp/build_samples.sh -i ${{ env.INSTALL_DIR }} -b ${{ env.BUILD_DIR }}/cpp_samples
      continue-on-error: false

    - name: Build c samples
      run: |
        export VERBOSE=1
        ${{ env.SAMPLES_INSTALL_DIR }}/c/build_samples.sh -i ${{ env.INSTALL_DIR }} -b ${{ env.BUILD_DIR }}/c_samples

    - name: Clean build dir
      run: rm -fr ${{ env.BUILD_DIR }}

    - name: OV Core UT
      run: ${{ env.RUN_PREFIX }} ${{ env.INSTALL_TEST_DIR }}/ov_core_unit_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-NGraphUT.xml

    - name: IR Frontend Tests
      run: ${{ env.RUN_PREFIX }} ${{ env.INSTALL_TEST_DIR }}/ov_ir_frontend_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-IRFrontend.xml

    - name: ONNX Frontend Tests
      run: ${{ env.RUN_PREFIX }} ${{ env.INSTALL_TEST_DIR }}/ov_onnx_frontend_tests --gtest_print_time=1 --gtest_filter=-*IE_GPU* --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ONNXFrontend.xml

    - name: Paddle Frontent UT
      run: ${{ env.RUN_PREFIX }} ${{ env.INSTALL_TEST_DIR }}/paddle_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-Paddle.xml

    - name: TensorFlow Frontend Unit Tests
      run: |
        export OV_FRONTEND_PATH=${{ env.INSTALL_TEST_DIR }}
        ${{ env.RUN_PREFIX }} ${{ env.INSTALL_TEST_DIR }}/ov_tensorflow_frontend_tests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-Tensorflow.xml

    - name: IE UT old
      run: ${{ env.RUN_PREFIX }} ${{ env.INSTALL_TEST_DIR }}/InferenceEngineUnitTests --gtest_print_time=1 --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-InferenceEngineUnitTests.xml

    - name: IE UT
      run: ${{ env.RUN_PREFIX }} ${{ env.INSTALL_TEST_DIR }}/ieUnitTests --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ieUnitTests.xml

    - name: Intel CPU Unit Test
      run: ${{ env.RUN_PREFIX }} ${{ env.INSTALL_TEST_DIR }}/ov_cpu_unit_tests --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ov_cpu_unit_tests.xml

    - name: GNA UT
      run: ${{ env.RUN_PREFIX }} ${{ env.INSTALL_TEST_DIR }}/ov_gna_unit_tests --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ov_gna_unit_tests.xml

    - name: VPU UT
      run: ${{ env.RUN_PREFIX }} ${{ env.INSTALL_TEST_DIR }}/vpuUnitTests --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-vpuUnitTests.xml

    - name: XLink Tests
      run: ${{ env.RUN_PREFIX }} ${{ env.INSTALL_TEST_DIR }}/XLinkTests --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-XLinkTests.xml

    - name: MULTI UT
      run: ${{ env.RUN_PREFIX }} ${{ env.INSTALL_TEST_DIR }}/ieMultiPluginUnitTests --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ieMultiPluginUnitTests.xml

    - name: IE FuncTests
      run: |
        # because of IR reader v7
        export LD_LIBRARY_PATH=${{ env.INSTALL_TEST_DIR }}
        ${{ env.RUN_PREFIX }} ${{ env.INSTALL_TEST_DIR }}/ieFuncTests --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ieFuncTests.xml

    - name: TEMPLATE FuncTests
      run: ${{ env.RUN_PREFIX }} ${{ env.INSTALL_TEST_DIR }}/ov_template_func_tests --gtest_filter=*smoke* --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-templateFuncTests.xml

    - name: IE CAPITests
      run: |
        export DATA_PATH=${{ env.MODELS_PATH }}
        export MODELS_PATH=${{ env.MODELS_PATH }}
        ${{ env.RUN_PREFIX }} ${{ env.INSTALL_TEST_DIR }}/InferenceEngineCAPITests --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-InferenceEngineCAPITests.xml

    - name: OV CAPITests
      run: |
        export DATA_PATH=${{ env.MODELS_PATH }}
        export MODELS_PATH=${{ env.MODELS_PATH }}
        ${{ env.RUN_PREFIX }} ${{ env.INSTALL_TEST_DIR }}/ov_capi_test --gtest_output=xml:${{ env.INSTALL_TEST_DIR }}/TEST-ov_capi_test.xml

    - name: Build Coverage
      run: |
        export CCACHE_DIR=${{ env.CCACHE_DIR }}
        export CCACHE_TEMPDIR=${{ env.TMP_DIR }}/ccache
        export CCACHE_BASEDIR=${{ env.Pipeline.Workspace }}
        export CCACHE_MAXSIZE=50G
        cmake --build ${{ env.BUILD_DIR }} --target ov_coverage -- -C ${{ env.BUILD_DIR }}
      if: (success())

    - name: Collect Coverage
      if: (success())
      uses: codecov/codecov-action@v3
      with:
        verbose: true
